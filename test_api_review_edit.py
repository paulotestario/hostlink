#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
from datetime import datetime
from database import get_database

def test_api_review_functionality():
    """Testes da API de edi√ß√£o de avalia√ß√µes usando requests"""
    print("üîß Iniciando testes da API de edi√ß√£o de avalia√ß√µes")
    print("=" * 60)
    
    base_url = 'http://localhost:5000'
    db = get_database()
    test_booking_id = 6
    
    # Verificar se o servidor est√° rodando
    try:
        response = requests.get(base_url, timeout=5)
        print(f"‚úÖ Servidor respondendo: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Servidor n√£o est√° rodando: {e}")
        return False
    
    success_count = 0
    total_tests = 0
    
    # Teste 1: Verificar endpoint can-edit
    total_tests += 1
    print(f"\nüìã Teste 1: Endpoint /api/reviews/can-edit/{test_booking_id}")
    try:
        response = requests.get(f"{base_url}/api/reviews/can-edit/{test_booking_id}")
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"   Resposta JSON: {json.dumps(data, indent=2)}")
                
                if 'can_edit' in data:
                    print(f"   ‚úÖ Campo 'can_edit' presente: {data['can_edit']}")
                    success_count += 1
                else:
                    print("   ‚ùå Campo 'can_edit' ausente")
            except json.JSONDecodeError:
                print(f"   ‚ùå Resposta n√£o √© JSON v√°lido: {response.text[:200]}")
        else:
            print(f"   ‚ùå Status code inesperado: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro na requisi√ß√£o: {e}")
    
    # Teste 2: Verificar dados no banco
    total_tests += 1
    print(f"\nüìã Teste 2: Verificar dados no banco para booking {test_booking_id}")
    try:
        # Verificar se booking existe
        booking = db.get_booking_by_id(test_booking_id)
        if booking:
            print(f"   ‚úÖ Booking encontrado: ID {booking['id']}")
            
            # Verificar se h√° avalia√ß√£o
            review = db.get_booking_review(test_booking_id)
            if review:
                print(f"   ‚úÖ Avalia√ß√£o encontrada: '{review.get('review_title', 'Sem t√≠tulo')}'")
                print(f"   Data da avalia√ß√£o: {review.get('created_at', 'N/A')}")
            else:
                print("   ‚ö†Ô∏è Nenhuma avalia√ß√£o encontrada")
            
            # Verificar permiss√£o de edi√ß√£o
            can_edit_result = db.can_user_edit_review(booking['user_id'], test_booking_id)
            print(f"   Permiss√£o de edi√ß√£o: {can_edit_result}")
            
            success_count += 1
        else:
            print(f"   ‚ùå Booking {test_booking_id} n√£o encontrado")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao acessar banco: {e}")
    
    # Teste 3: Testar cria√ß√£o/atualiza√ß√£o de avalia√ß√£o
    total_tests += 1
    print(f"\nüìã Teste 3: Testar API de cria√ß√£o/atualiza√ß√£o")
    try:
        # Dados de teste
        test_data = {
            'booking_id': test_booking_id,
            'overall_rating': 4,
            'cleanliness_rating': 4,
            'checkin_rating': 5,
            'accuracy_rating': 4,
            'location_rating': 5,
            'value_rating': 4,
            'review_title': f'Teste API - {datetime.now().strftime("%H:%M:%S")}',
            'review_comment': 'Coment√°rio de teste automatizado via API',
            'recommend_host': True,
            'public_review': True
        }
        
        # Tentar PUT (atualiza√ß√£o)
        response = requests.put(
            f"{base_url}/api/reviews",
            json=test_data,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"   Status da requisi√ß√£o PUT: {response.status_code}")
        
        if response.status_code in [200, 201]:
            try:
                result = response.json()
                print(f"   ‚úÖ Resposta: {result.get('message', 'Sucesso')}")
                success_count += 1
            except json.JSONDecodeError:
                print(f"   ‚ö†Ô∏è Resposta n√£o √© JSON: {response.text[:100]}")
                if response.status_code == 200:
                    success_count += 1
        else:
            print(f"   ‚ùå Falha na atualiza√ß√£o: {response.text[:200]}")
            
    except Exception as e:
        print(f"   ‚ùå Erro na requisi√ß√£o PUT: {e}")
    
    # Teste 4: Verificar se a atualiza√ß√£o foi salva
    total_tests += 1
    print(f"\nüìã Teste 4: Verificar se atualiza√ß√£o foi salva")
    try:
        updated_review = db.get_booking_review(test_booking_id)
        if updated_review:
            current_title = updated_review.get('review_title', '')
            if 'Teste API' in current_title:
                print(f"   ‚úÖ Atualiza√ß√£o confirmada: {current_title}")
                success_count += 1
            else:
                print(f"   ‚ö†Ô∏è T√≠tulo n√£o foi atualizado: {current_title}")
        else:
            print("   ‚ùå Avalia√ß√£o n√£o encontrada ap√≥s atualiza√ß√£o")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar atualiza√ß√£o: {e}")
    
    # Teste 5: Verificar estat√≠sticas
    total_tests += 1
    print(f"\nüìã Teste 5: Verificar atualiza√ß√£o de estat√≠sticas")
    try:
        # Buscar estat√≠sticas da propriedade
        booking = db.get_booking_by_id(test_booking_id)
        if booking:
            property_id = booking['property_id']
            stats = db.get_property_statistics(property_id)
            
            if stats:
                print(f"   ‚úÖ Estat√≠sticas encontradas:")
                print(f"   - Avalia√ß√£o m√©dia: {stats.get('average_rating', 'N/A')}")
                print(f"   - Total de avalia√ß√µes: {stats.get('total_reviews', 'N/A')}")
                success_count += 1
            else:
                print("   ‚ö†Ô∏è Estat√≠sticas n√£o encontradas")
        else:
            print("   ‚ùå Booking n√£o encontrado para verificar estat√≠sticas")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar estat√≠sticas: {e}")
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES DA API")
    print(f"   Total de testes: {total_tests}")
    print(f"   Sucessos: {success_count}")
    print(f"   Falhas: {total_tests - success_count}")
    
    success_rate = (success_count / total_tests) * 100 if total_tests > 0 else 0
    
    if success_rate >= 80:
        print(f"\nüéâ TESTES APROVADOS! ({success_rate:.1f}% de sucesso)")
        print("‚úÖ A API de edi√ß√£o de avalia√ß√µes est√° funcionando corretamente")
        return True
    else:
        print(f"\n‚ö†Ô∏è TESTES PARCIALMENTE APROVADOS ({success_rate:.1f}% de sucesso)")
        print("‚ùå Algumas funcionalidades podem precisar de ajustes")
        return False

def run_comprehensive_tests():
    """Executar testes abrangentes (Selenium + API)"""
    print("üöÄ INICIANDO TESTES AUTOMATIZADOS ABRANGENTES")
    print("=" * 70)
    
    # Primeiro tentar testes da API
    api_success = test_api_review_functionality()
    
    # Tentar testes Selenium como complemento
    selenium_success = False
    try:
        print("\n" + "=" * 70)
        print("üîß Tentando executar testes Selenium...")
        
        from test_selenium_review_edit import run_selenium_tests
        selenium_success = run_selenium_tests()
        
    except Exception as e:
        print(f"‚ö†Ô∏è Testes Selenium n√£o puderam ser executados: {e}")
        print("   Continuando apenas com testes da API...")
    
    # Resultado final
    print("\n" + "=" * 70)
    print("üèÅ RESULTADO FINAL DOS TESTES")
    print(f"   Testes da API: {'‚úÖ PASSOU' if api_success else '‚ùå FALHOU'}")
    print(f"   Testes Selenium: {'‚úÖ PASSOU' if selenium_success else '‚ö†Ô∏è N√ÉO EXECUTADO'}")
    
    overall_success = api_success  # Consideramos sucesso se pelo menos a API funciona
    
    if overall_success:
        print("\nüéâ FUNCIONALIDADE APROVADA PARA PRODU√á√ÉO!")
        print("‚úÖ A edi√ß√£o de avalia√ß√µes est√° pronta para uso")
    else:
        print("\n‚ùå FUNCIONALIDADE PRECISA DE CORRE√á√ïES")
        print("‚ö†Ô∏è N√£o recomendado para produ√ß√£o no estado atual")
    
    return overall_success

if __name__ == '__main__':
    success = run_comprehensive_tests()
    exit(0 if success else 1)