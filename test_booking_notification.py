#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from database import get_database
from datetime import datetime, timedelta

def test_booking_notification():
    """Testa se as notifica√ß√µes s√£o criadas automaticamente ao fazer uma reserva"""
    try:
        db = get_database()
        
        print("üß™ Testando cria√ß√£o autom√°tica de notifica√ß√µes...\n")
        
        # Verificar se existem an√∫ncios dispon√≠veis
        listings = db.get_all_public_listings()
        if not listings:
            print("‚ùå Nenhum an√∫ncio encontrado para teste")
            return
        
        listing = listings[0]
        listing_id = listing['id']
        host_user_id = listing['user_id']
        
        print(f"üìã Usando an√∫ncio ID: {listing_id}")
        print(f"üè† T√≠tulo: {listing.get('title', 'N/A')}")
        print(f"üë§ Host ID: {host_user_id}")
        
        # Contar notifica√ß√µes antes
        notifications_before = db.get_user_notifications(host_user_id)
        unread_before = db.get_unread_notifications_count(host_user_id)
        print(f"\nüìä Notifica√ß√µes antes: {len(notifications_before)} (n√£o lidas: {unread_before})")
        
        # Criar uma reserva de teste
        start_date = (datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d')
        end_date = (datetime.now() + timedelta(days=10)).strftime('%Y-%m-%d')
        
        print(f"\nüóìÔ∏è Criando reserva de {start_date} at√© {end_date}...")
        
        booking_id = db.create_public_booking(
            listing_id=listing_id,
            start_date=start_date,
            end_date=end_date,
            guest_name="Jo√£o Teste",
            guest_email="joao.teste@email.com",
            guest_phone="(11) 99999-9999"
        )
        
        if booking_id:
            print(f"‚úÖ Reserva criada com ID: {booking_id}")
            
            # Contar notifica√ß√µes depois
            notifications_after = db.get_user_notifications(host_user_id)
            unread_after = db.get_unread_notifications_count(host_user_id)
            print(f"\nüìä Notifica√ß√µes depois: {len(notifications_after)} (n√£o lidas: {unread_after})")
            
            # Verificar se uma nova notifica√ß√£o foi criada
            if len(notifications_after) > len(notifications_before):
                print("‚úÖ Nova notifica√ß√£o criada automaticamente!")
                
                # Mostrar a notifica√ß√£o mais recente
                latest_notification = notifications_after[0]  # Assumindo que est√° ordenada por data
                print(f"\nüîî √öltima notifica√ß√£o:")
                print(f"   T√≠tulo: {latest_notification['title']}")
                print(f"   Mensagem: {latest_notification['message']}")
                print(f"   Tipo: {latest_notification['type']}")
                print(f"   Lida: {'Sim' if latest_notification['is_read'] else 'N√£o'}")
                print(f"   Data: {latest_notification['created_at']}")
                
                if latest_notification['related_booking_id'] == booking_id:
                    print("‚úÖ Notifica√ß√£o corretamente vinculada √† reserva!")
                else:
                    print("‚ö†Ô∏è Notifica√ß√£o n√£o est√° vinculada √† reserva criada")
            else:
                print("‚ùå Nenhuma nova notifica√ß√£o foi criada")
                
        else:
            print("‚ùå Erro ao criar reserva")
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()

def test_authenticated_booking_notification():
    """Testa notifica√ß√£o para reserva autenticada"""
    try:
        db = get_database()
        
        print("\nüß™ Testando reserva autenticada...\n")
        
        # Buscar um usu√°rio para usar como guest
        users_result = db.supabase.table('users').select('id, name, email').limit(1).execute()
        if not users_result.data:
            print("‚ùå Nenhum usu√°rio encontrado para teste")
            return
            
        guest_user = users_result.data[0]
        guest_user_id = guest_user['id']
        
        # Buscar an√∫ncios
        listings = db.get_all_public_listings()
        if not listings:
            print("‚ùå Nenhum an√∫ncio encontrado")
            return
            
        listing = listings[0]
        listing_id = listing['id']
        host_user_id = listing['user_id']
        
        # Verificar se guest e host s√£o diferentes
        if guest_user_id == host_user_id:
            print("‚ö†Ô∏è Guest e host s√£o o mesmo usu√°rio, pulando teste")
            return
            
        print(f"üë§ Guest: {guest_user['name']} (ID: {guest_user_id})")
        print(f"üè† Host: ID {host_user_id}")
        
        # Contar notifica√ß√µes antes
        notifications_before = db.get_user_notifications(host_user_id)
        print(f"üìä Notifica√ß√µes do host antes: {len(notifications_before)}")
        
        # Criar reserva autenticada
        start_date = (datetime.now() + timedelta(days=14)).strftime('%Y-%m-%d')
        end_date = (datetime.now() + timedelta(days=17)).strftime('%Y-%m-%d')
        
        booking_id = db.create_authenticated_booking(
            listing_id=listing_id,
            guest_user_id=guest_user_id,
            start_date=start_date,
            end_date=end_date,
            guest_name=guest_user['name'],
            guest_email=guest_user['email']
        )
        
        if booking_id:
            print(f"‚úÖ Reserva autenticada criada com ID: {booking_id}")
            
            # Verificar notifica√ß√µes
            notifications_after = db.get_user_notifications(host_user_id)
            print(f"üìä Notifica√ß√µes do host depois: {len(notifications_after)}")
            
            if len(notifications_after) > len(notifications_before):
                print("‚úÖ Notifica√ß√£o criada para reserva autenticada!")
            else:
                print("‚ùå Notifica√ß√£o n√£o foi criada")
        else:
            print("‚ùå Erro ao criar reserva autenticada")
            
    except Exception as e:
        print(f"‚ùå Erro no teste autenticado: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    print("üîç Testando sistema de notifica√ß√µes autom√°ticas...\n")
    test_booking_notification()
    test_authenticated_booking_notification()
    print("\n‚úÖ Testes conclu√≠dos!")