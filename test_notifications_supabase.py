#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste das notifica√ß√µes no Supabase
"""

import os
from datetime import datetime
from database import get_database
from dotenv import load_dotenv

load_dotenv()

def test_notifications():
    """Testa o sistema de notifica√ß√µes"""
    try:
        db = get_database()
        print("‚úÖ Conex√£o com Supabase estabelecida")
        
        # Verificar se h√° usu√°rios
        print("\nüîç Verificando usu√°rios...")
        # Como n√£o temos acesso direto ao m√©todo, vamos tentar criar uma notifica√ß√£o de teste
        
        # Tentar buscar notifica√ß√µes de um usu√°rio (ID 1 como teste)
        print("\nüìã Testando busca de notifica√ß√µes...")
        notifications = db.get_user_notifications(1, limit=5)
        print(f"Notifica√ß√µes encontradas: {len(notifications)}")
        
        if notifications:
            print("\n√öltimas notifica√ß√µes:")
            for notif in notifications:
                print(f"- ID: {notif.get('id')}, T√≠tulo: {notif.get('title')}, Lida: {notif.get('is_read')}")
        else:
            print("\nüìù Criando notifica√ß√£o de teste...")
            # Tentar criar uma notifica√ß√£o de teste
            notification_id = db.create_notification(
                user_id=1,
                notification_type='test',
                title='Teste de Notifica√ß√£o',
                message='Esta √© uma notifica√ß√£o de teste para verificar o sistema.'
            )
            print(f"‚úÖ Notifica√ß√£o criada com ID: {notification_id}")
            
            # Buscar novamente
            notifications = db.get_user_notifications(1, limit=5)
            print(f"Notifica√ß√µes ap√≥s cria√ß√£o: {len(notifications)}")
        
        # Testar contagem de n√£o lidas
        print("\nüî¢ Testando contagem de n√£o lidas...")
        unread_count = db.get_unread_notifications_count(1)
        print(f"Notifica√ß√µes n√£o lidas: {unread_count}")
        
        print("\n‚úÖ Teste de notifica√ß√µes conclu√≠do com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro no teste de notifica√ß√µes: {e}")
        import traceback
        traceback.print_exc()

def test_notification_creation():
    """Testa a cria√ß√£o de notifica√ß√µes para diferentes cen√°rios"""
    try:
        db = get_database()
        
        # Criar diferentes tipos de notifica√ß√µes
        notification_types = [
            {
                'type': 'booking',
                'title': 'Nova Reserva',
                'message': 'Voc√™ recebeu uma nova reserva para sua propriedade.'
            },
            {
                'type': 'payment',
                'title': 'Pagamento Confirmado',
                'message': 'O pagamento da sua reserva foi confirmado.'
            },
            {
                'type': 'review',
                'title': 'Nova Avalia√ß√£o',
                'message': 'Voc√™ recebeu uma nova avalia√ß√£o de 5 estrelas!'
            }
        ]
        
        print("\nüìù Criando notifica√ß√µes de teste...")
        for notif_data in notification_types:
            try:
                notification_id = db.create_notification(
                    user_id=1,
                    notification_type=notif_data['type'],
                    title=notif_data['title'],
                    message=notif_data['message']
                )
                print(f"‚úÖ Notifica√ß√£o '{notif_data['title']}' criada com ID: {notification_id}")
            except Exception as e:
                print(f"‚ùå Erro ao criar notifica√ß√£o '{notif_data['title']}': {e}")
        
        # Verificar notifica√ß√µes criadas
        notifications = db.get_user_notifications(1, limit=10)
        print(f"\nüìã Total de notifica√ß√µes: {len(notifications)}")
        
        for notif in notifications:
            print(f"- {notif.get('title')} ({notif.get('type')}) - Lida: {notif.get('is_read')}")
            
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o de notifica√ß√µes: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    print("üß™ Iniciando teste do sistema de notifica√ß√µes...")
    test_notifications()
    print("\n" + "="*50)
    test_notification_creation()